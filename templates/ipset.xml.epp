<?xml version="1.0" encoding="utf-8"?>
<!-- This file was generated by Puppet -->
<ipset type="hash:ip">
<%# Resolve four levels of nested IP sets; raise error at the fifth level. We
  should add checks for duplicate entries, but FirewallD ignores them, so it's
  currently not a problem. All this looping should obviously be done
  by a recursive function, but that will require writing a custom Ruby
  function for the module. -%>
<%- $ipsets[$ipsetname].each |$level1item| { -%>
  <%- if $level1item.is_a(Stdlib::IP::Address) { -%>
    <%# Level 1: Item is a valid IP address; print it -%>
  <entry><%= $level1item -%></entry>
  <%- } else { -%>
    <%# Level 2: Item is a nested IP set; let's resolve it -%>
    <%- if ! $ipsets.has_key($level1item) { -%>
      <%- fail("Invalid IP set item ('${level1item}') found in IP set '${ipsetname}'") -%>
    <%- } else { -%>
      <%- $ipsets[$level1item].each |$level2item| { -%>
        <%- if $level2item.is_a(Stdlib::IP::Address) { -%>
          <%# Level 2: Item is a valid IP address; print it -%>
  <entry><%= $level2item -%></entry>
        <%- } else { -%>
          <%# Level 3: Item is a nested IP set; let's resolve it -%>
          <%- if ! $ipsets.has_key($level2item) { -%>
            <%- fail("Invalid IP set item ('${level2item}') found in IP set '${level1item}'") -%>
          <%- } else { -%>
            <%- $ipsets[$level2item].each |$level3item| { -%>
              <%- if $level3item.is_a(Stdlib::IP::Address) { -%>
                <%# Level 3: Item is a valid IP address; print it -%>
  <entry><%= $level3item -%></entry>
              <%- } else { -%>
                <%# Level 4: Item is a nested IP set; let's resolve it -%>
                <%- if ! $ipsets.has_key($level3item) { -%>
                  <%- fail("Invalid IP set item ('${level3item}') found in IP set '${level2item}'") -%>
                <%- } else { -%>
                  <%- $ipsets[$level3item].each |$level4item| { -%>
                    <%- if $level4item.is_a(Stdlib::IP::Address) { -%>
                      <%# Level 4: Item is a valid IP address; print it -%>
  <entry><%= $level4item -%></entry>
                    <%- } else { -%>
                      <%# All this nesting is getting tiresome. Let's throw an error. -%>
                      <%- fail("Too many levels of nesting in firewalld::ipsets!") -%>
                    <%- } -%>
                  <%- } -%>
                <%- } -%>
              <%- } -%>
            <%- } -%>
          <%- } -%>
        <%- } -%>
      <%- } -%>
    <%- } -%>
  <%- } -%>
<%- } -%>
</ipset>
